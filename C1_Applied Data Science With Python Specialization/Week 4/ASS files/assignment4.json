{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "48770f8b5f5d3062d3badd51fcafc401",
     "grade": false,
     "grade_id": "cell-a6c4f74309fc2379",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# Assignment 4\n",
    "## Description\n",
    "In this assignment you must read in a file of metropolitan regions and associated sports teams from [assets/wikipedia_data.html](assets/wikipedia_data.html) and answer some questions about each metropolitan region. Each of these regions may have one or more teams from the \"Big 4\": NFL (football, in [assets/nfl.csv](assets/nfl.csv)), MLB (baseball, in [assets/mlb.csv](assets/mlb.csv)), NBA (basketball, in [assets/nba.csv](assets/nba.csv) or NHL (hockey, in [assets/nhl.csv](assets/nhl.csv)). Please keep in mind that all questions are from the perspective of the metropolitan region, and that this file is the \"source of authority\" for the location of a given sports team. Thus teams which are commonly known by a different area (e.g. \"Oakland Raiders\") need to be mapped into the metropolitan region given (e.g. San Francisco Bay Area). This will require some human data understanding outside of the data you've been given (e.g. you will have to hand-code some names, and might need to google to find out where teams are)!\n",
    "\n",
    "For each sport I would like you to answer the question: **what is the win/loss ratio's correlation with the population of the city it is in?** Win/Loss ratio refers to the number of wins over the number of wins plus the number of losses. Remember that to calculate the correlation with [`pearsonr`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.pearsonr.html), so you are going to send in two ordered lists of values, the populations from the wikipedia_data.html file and the win/loss ratio for a given sport in the same order. Average the win/loss ratios for those cities which have multiple teams of a single sport. Each sport is worth an equal amount in this assignment (20%\\*4=80%) of the grade for this assignment. You should only use data **from year 2018** for your analysis -- this is important!\n",
    "\n",
    "## Notes\n",
    "\n",
    "1. Do not include data about the MLS or CFL in any of the work you are doing, we're only interested in the Big 4 in this assignment.\n",
    "2. I highly suggest that you first tackle the four correlation questions in order, as they are all similar and worth the majority of grades for this assignment. This is by design!\n",
    "3. It's fair game to talk with peers about high level strategy as well as the relationship between metropolitan areas and sports teams. However, do not post code solving aspects of the assignment (including such as dictionaries mapping areas to teams, or regexes which will clean up names).\n",
    "4. There may be more teams than the assert statements test, remember to collapse multiple teams in one city into a single value!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "369ff9ecf0ee04640574205cbc697f94",
     "grade": false,
     "grade_id": "cell-712b2b5da63d4505",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 1\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NHL** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "1cac4803b02502929f5b1612d48db2b5",
     "grade": false,
     "grade_id": "cell-69b16e4386e58030",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "nhl_df=pd.read_csv(\"assets/nhl.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def nhl_correlation(): \n",
    "                    # All the modifications regarding `nhl_df` data:\n",
    "        \n",
    "    # 1. get only 2018 records.\n",
    "    nhl_18_df = nhl_df[nhl_df['year'] == 2018]\n",
    "    # remove `*` that written besides teams' names.\n",
    "    nhl_18_df= nhl_18_df.replace('\\*','',regex=True)\n",
    "    # specify our columns of interest which are `team` ,`W` &  `L\n",
    "    nhl_18_df = nhl_18_df.iloc[:,[0,2,3]]\n",
    "    \n",
    "    # get rid of the unwanted rows that holds similar value in all columns:\n",
    "    # create a list to store the index of the unwanted rows.\n",
    "    unwanted_rows_indexes = []\n",
    "    # iterate over all the indexes in the dataframe.\n",
    "    for i in nhl_18_df.index :\n",
    "        # use the indexes to hold every row.\n",
    "        row = nhl_18_df.iloc[i]\n",
    "        # set the condition that has to be met,then append the index in \n",
    "        # the list.\n",
    "        if row['team'] == row['W'] == row['L']:\n",
    "            unwanted_rows_indexes.append(i)\n",
    "            \n",
    "    # drop the unwanted rows in action.\n",
    "    nhl_18_df.drop(unwanted_rows_indexes, inplace = True)\n",
    "    \n",
    "    # remove the entire team's name except the last name for merging purposes.\n",
    "    nhl_18_df['team'] = nhl_18_df['team'].str.replace('[\\w.]* ','')\n",
    "    \n",
    "    # set the dtype of each column, then calculate `the win_to_lose_ratio`.\n",
    "    nhl_18_df = nhl_18_df.astype({'team': str, 'W': int, 'L': int})\n",
    "    nhl_18_df['W_L_Ratio'] = nhl_18_df['W']/(nhl_18_df['W']+nhl_18_df['L'])\n",
    "    \n",
    "    \n",
    "                            # All the modifications regarding `cities` dataFrame.\n",
    "    \n",
    "    # read our html file from wikipedia.\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    # select our columns of interest. keep in mind to exclude the last row that had the total. \n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    \n",
    "    # remove `[note ]` in the names of the teams.\n",
    "    cities= cities.replace('\\[.*\\]','',regex=True)\n",
    "    # rename the pop column to be more direct.\n",
    "    cities.rename(columns = {'Population (2016 est.)[8]':'Population'}, inplace= True)\n",
    "    \n",
    "    # so important `regex. with str.extract()`\n",
    "    # the purpose of this regex is to extract the teams' names that are\n",
    "    # concatenated with each other like: RangersIslandersDevils and make \n",
    "    # each name in seperate column.\n",
    "    team = cities['NHL'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    # since team dataframe was part of cities dataframe so they have the same\n",
    "    # num of rows therefore i can make 'Metropolitan area' col accordingly.\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    \n",
    "    # here we want to get the teams' names that each one of them was in separate\n",
    "    # column all in one column, using melt() this brings 'variable' col (holds the column index or name) & \n",
    "    # `value` col (holds teams' names)\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "    \n",
    "    team = team.replace('â€”',np.NaN)                         # assign NaN values for the '-' & ''.\n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  # keep in mind that dropna() don't rearange the indexes so you need to reset it.\n",
    "    team = team.drop('variable',axis = 1)                   # drop the 'variable' col cuz it is no longer needed.\n",
    "    team = team.reset_index()                               # reset the index because dropna() just droped them only.\n",
    "    team.rename(columns = {'value':'team'},inplace = True)  # rename the 'value' we got from melt() to be `team`\n",
    "    \n",
    "    # remove the entire team's name except the last name for merging purposes.\n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "\n",
    "    \n",
    "    \n",
    "                                             # creating `team_df`\n",
    "        \n",
    "    # now, the time of merging back between `cities` & `team` but make sure to make the join \n",
    "    # with respect to `team` to get only the 31 teams we got as result  of the cleaning steps.\n",
    "    team_df = pd.merge(team,cities,how = 'left' , on= 'Metropolitan area')\n",
    "    team_df = team_df.iloc[:,1:4]                                                        # select our 3 columns of interest.\n",
    "    team_df = team_df.astype({'Metropolitan area': str, 'team': str, 'Population': int}) # assign the types of our 3 cols.\n",
    "    \n",
    "                                            # creating `final_df`\n",
    "    # the purpose of this merging is getting `W` (num of wins) `L` (num loses) columns.\n",
    "    # and `w_l_ratio`. each df has 31 team.\n",
    "    final_df =pd.merge(team_df,nhl_18_df,how='inner',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W_L_Ratio':np.nanmean,\n",
    "                                           'Population':np.nanmean})\n",
    "    \n",
    "    # raise NotImplementedError()\n",
    "    # pass in metropolitan area population from cities\n",
    "    population_by_region =aggregated_df['Population']\n",
    "    # pass in win/loss ratio from nhl_df in the same order as \n",
    "    # cities[\"Metropolitan area\"]\n",
    "    win_loss_by_region =aggregated_df['W_L_Ratio'] \n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q1: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q1: There should be 28 teams being analysed for NHL\"\n",
    "    \n",
    "    return stats.pearsonr(population_by_region, win_loss_by_region)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "52a581df513c71153e105b93764cda4b",
     "grade": true,
     "grade_id": "cell-ebe0b2dfe1067e63",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "988912cae4968d81473f46d783e79c16",
     "grade": false,
     "grade_id": "cell-cb964e690298b71d",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 2\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NBA** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "9394222aafc8ccab0a228098ba0d6010",
     "grade": false,
     "grade_id": "cell-5a5f21279e3d3572",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def nba_correlation():\n",
    "    # All the modifications regarding `nhl_df` data:\n",
    "        \n",
    "    # 1. get only 2018 records.\n",
    "    nba_18_df = nba_df[nba_df['year'] == 2018]\n",
    "    # remove `*` that written besides teams' names.\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\*]',\"\")\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('\\(\\d*\\)',\"\")\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\xa0]',\"\")\n",
    "    # specify our columns of interest which are `team` ,`W` &  `L\n",
    "    nba_18_df = nba_18_df.iloc[:,[0,3]]\n",
    "    # remove the entire team's name except the last name for merging purposes.\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\w.]* ','')\n",
    "    # set the dtype of each column, then calculate `the win_to_lose_ratio`.\n",
    "    nba_18_df = nba_18_df.astype({'team': str, 'W/L%': float})\n",
    "    \n",
    "    \n",
    "                            # All the modifications regarding `cities` dataFrame.\n",
    "    \n",
    "    # read our html file from wikipedia.\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    # select our columns of interest. keep in mind to exclude the last row that had the total. \n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "     # remove `[note ]` in the names of the teams.\n",
    "    cities= cities.replace('\\[.*\\]','',regex=True)\n",
    "    # rename the pop column to be more direct.\n",
    "    cities.rename(columns = {'Population (2016 est.)[8]':'Population'}, inplace= True)\n",
    "    \n",
    "    # so important `regex. with str.extract()`\n",
    "    # the purpose of this regex is to extract the teams' names that are\n",
    "    # concatenated with each other like: RangersIslandersDevils and make \n",
    "    # each name in seperate column.\n",
    "    team = cities['NBA'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    # since team dataframe was part of cities dataframe so they have the same\n",
    "    # num of rows therefore i can make 'Metropolitan area' col accordingly.\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    \n",
    "    # here we want to get the teams' names that each one of them was in separate\n",
    "    # column all in one column, using melt() this brings 'variable' col (holds the column index or name) & \n",
    "    # `value` col (holds teams' names)\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "    \n",
    "    team = team.replace('â€”',np.NaN)                         # assign NaN values for the '-' & ''.\n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  # keep in mind that dropna() don't rearange the indexes so you need to reset it.\n",
    "    team = team.drop('variable',axis = 1)                   # drop the 'variable' col cuz it is no longer needed.\n",
    "    team = team.reset_index()                               # reset the index because dropna() just droped them only.\n",
    "    team.rename(columns = {'value':'team'},inplace = True)  # rename the 'value' we got from melt() to be `team`\n",
    "    \n",
    "    # remove the entire team's name except the last name for merging purposes.\n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "        \n",
    "    # now, the time of merging back between `cities` & `team` but make sure to make the join \n",
    "    # with respect to `team` to get only the 31 teams we got as result  of the cleaning steps.\n",
    "    team_df = pd.merge(team,cities,how = 'left' , on= 'Metropolitan area')\n",
    "    team_df = team_df.iloc[:,1:4]                                                        # select our 3 columns of interest.\n",
    "    team_df = team_df.astype({'Metropolitan area': str, 'team': str, 'Population': int}) # assign the types of our 3 cols.\n",
    "    \n",
    "    \n",
    "    \n",
    "                                            # creating `final_df`\n",
    "    # the purpose of this merging is getting `W` (num of wins) `L` (num loses) columns.\n",
    "    # and `w_l_ratio`. each df has 31 team.\n",
    "    final_df =pd.merge(team_df,nba_18_df,how='outer',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W/L%':np.nanmean,\n",
    "                                           'Population':np.nanmean})\n",
    "    \n",
    "    # pass in metropolitan area population from cities\n",
    "    population_by_region =aggregated_df['Population']\n",
    "    # pass in win/loss ratio from nhl_df in the same order as \n",
    "    # cities[\"Metropolitan area\"]\n",
    "    win_loss_by_region =aggregated_df['W/L%'] \n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    # raise NotImplementedError()\n",
    "    \n",
    "    population_by_region = aggregated_df['Population'] # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W/L%'] # pass in win/loss ratio from nba_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q2: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q2: There should be 28 teams being analysed for NBA\"\n",
    "\n",
    "    return stats.pearsonr(population_by_region, win_loss_by_region)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "bbdeb8eb22f525a34c10dc8798324e42",
     "grade": true,
     "grade_id": "cell-e573b2b4a282b470",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "1a1a5809f675ca033086422007cd73bd",
     "grade": false,
     "grade_id": "cell-96e15e4335df78f4",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 3\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **MLB** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "27e8c0da6c9fa0dffc10488314335b6c",
     "grade": false,
     "grade_id": "cell-33b00fc3f3467b0c",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def mlb_correlation(): \n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities.rename(columns={\"Population (2016 est.)[8]\": \"Population\"},\n",
    "              inplace=True)\n",
    "    \n",
    "    # so important `regex. with str.extract()`\n",
    "    # the purpose of this regex is to extract the teams' names that are\n",
    "    # concatenated with each other like: RangersIslandersDevils and make \n",
    "    # each name in seperate column.\n",
    "    team = cities['MLB'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    # since team dataframe was part of cities dataframe so they have the same\n",
    "    # num of rows therefore i can make 'Metropolitan area' col accordingly.\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "\n",
    "    # here we want to get the teams' names that each one of them was in separate\n",
    "    # column all in one column, using melt() this brings 'variable' col (holds the column index or name) & \n",
    "    # `value` col (holds teams' names)\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "\n",
    "    team = team.replace('â€”',np.NaN)                         # assign NaN values for the '-' & ''.\n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  # keep in mind that dropna() don't rearange the indexes so you need to reset it.\n",
    "    team = team.drop('variable',axis = 1)                   # drop the 'variable' col cuz it is no longer needed.\n",
    "    team = team.reset_index()                               # reset the index because dropna() just droped them only.\n",
    "    team.rename(columns = {'value':'team'},inplace = True)  # rename the 'value' we got from melt() to be `team`\n",
    "\n",
    "    # remove the entire team's name except the last name for merging purposes.\n",
    "    team['team']=team['team'].str.replace('\\ Sox','Sox')\n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "\n",
    "               \n",
    "    team=pd.merge(team,cities,how='left',on = 'Metropolitan area').iloc[:,1:4]\n",
    "    team = team.astype({'Metropolitan area': str, 'team': str, 'Population': int})\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "\n",
    "    # All the modifications regarding `nhl_df` data:\n",
    "\n",
    "    # 1. get only 2018 records.\n",
    "    mlb_18_df = mlb_df[mlb_df['year'] == 2018]\n",
    "    # remove `*` that written besides teams' names.\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('[\\*]',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('\\(\\d*\\)',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('[\\xa0]',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('\\ Sox','Sox')\n",
    "\n",
    "    # specify our columns of interest which are `team` ,`W` &  `L\n",
    "    mlb_18_df = mlb_18_df.iloc[:,[0,3]]\n",
    "    mlb_18_df['team']= mlb_18_df['team'].str.replace('[\\w.]*\\ ','')\n",
    "    mlb_18_df = mlb_18_df.astype({'team': str,'W-L%': float})\n",
    "    \n",
    "    \n",
    "\n",
    "    final_df =pd.merge(team,mlb_18_df , how='outer',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W-L%':np.nanmean,\n",
    "                                           'Population':np.nanmean})  \n",
    "    \n",
    "    \n",
    "    # raise NotImplementedError()\n",
    "    population_by_region = aggregated_df['Population'] # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W-L%'] # pass in win/loss ratio from mlb_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q3: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 26, \"Q3: There should be 26 teams being analysed for MLB\"\n",
    "\n",
    "    return stats.pearsonr(population_by_region, win_loss_by_region)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "cda33b094ba19ccc37a481e0dd29e0bc",
     "grade": true,
     "grade_id": "cell-764d4476f425c5a2",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "6977a6da9ed6d8b7a0b7e37bbeda709b",
     "grade": false,
     "grade_id": "cell-793df6c04dfb126e",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 4\n",
    "For this question, calculate the win/loss ratio's correlation with the population of the city it is in for the **NFL** using **2018** data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "c4914ad1e119278ec2bd567c52640b66",
     "grade": false,
     "grade_id": "cell-8ccebc209aeec8d9",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def nfl_correlation(): \n",
    "    nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities.rename(columns={\"Population (2016 est.)[8]\": \"Population\"},\n",
    "              inplace=True)\n",
    "    \n",
    "    \n",
    "    nfl_df = nfl_df[nfl_df['year'] == 2018]\n",
    "    nfl_df = nfl_df[['team','W-L%']]\n",
    "    unwanted_rows = []\n",
    "    for i in nfl_df.index:\n",
    "        row = nfl_df.iloc[i]\n",
    "        if row['team'] == row['W-L%']:\n",
    "            unwanted_rows.append(i)\n",
    "\n",
    "    nfl_df = nfl_df.drop(unwanted_rows)    \n",
    "\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\*]',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('\\(\\d*\\)',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\xa0]',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('\\+',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\w.]* ',\"\")\n",
    "\n",
    "    nfl_df = nfl_df.astype({'team': str , 'W-L%':float})\n",
    "\n",
    "\n",
    "    cities = cities[['Metropolitan area','Population' , 'NFL']]\n",
    "    team = cities['NFL']\n",
    "    team= team.str.replace('\\[\\w.*\\]',\"\")\n",
    "    team = team.str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "\n",
    "    team = pd.melt(team,id_vars= 'Metropolitan area')\n",
    "\n",
    "    team = team.replace('â€”',np.NaN)                         \n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  \n",
    "    team = team.drop('variable',axis = 1)                   \n",
    "    team = team.reset_index()                               \n",
    "    team.rename(columns = {'value':'team'},inplace = True) \n",
    "    team =team[['Metropolitan area', 'team']]\n",
    "\n",
    "    # doing the mege to get population col\n",
    "    team = pd.merge(team,cities,how='left' , on='Metropolitan area')\n",
    "    team = team.astype({'Metropolitan area':str , 'team' : str\n",
    "                    ,'Population':int})\n",
    "\n",
    "    final_df = pd.merge(team,nfl_df,how='outer',on= 'team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W-L%':np.nanmean,'Population':np.nanmean})\n",
    "    \n",
    "    # raise NotImplementedError()\n",
    "    population_by_region = aggregated_df['Population']  # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W-L%']  # pass in win/loss ratio from nfl_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q4: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 29, \"Q4: There should be 29 teams being analysed for NFL\"\n",
    "\n",
    "    return stats.pearsonr(population_by_region, win_loss_by_region)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e9415d6399aa49e3a1a60813afdefa3b",
     "grade": true,
     "grade_id": "cell-de7b148b9554dbda",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "b02d5cd3273f561e4ae939bb2a41740c",
     "grade": false,
     "grade_id": "cell-97b49d8639e908c4",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 5\n",
    "In this question I would like you to explore the hypothesis that **given that an area has two sports teams in different sports, those teams will perform the same within their respective sports**. How I would like to see this explored is with a series of paired t-tests (so use [`ttest_rel`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_rel.html)) between all pairs of sports. Are there any sports where we can reject the null hypothesis? Again, average values where a sport has multiple teams in one region. Remember, you will only be including, for each sport, cities which have teams engaged in that sport, drop others as appropriate. This question is worth 20% of the grade for this assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "6d78c961eb66f8d8c81f06d33ae8f393",
     "grade": false,
     "grade_id": "cell-92f25f44b8d1179f",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "nhl_df=pd.read_csv(\"assets/nhl.csv\")\n",
    "nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "# first:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "def nhl_correlation(): \n",
    "    nhl_df=pd.read_csv(\"assets/nhl.csv\")\n",
    "    nhl_18_df = nhl_df[nhl_df['year'] == 2018]\n",
    "    nhl_18_df= nhl_18_df.replace('\\*','',regex=True)\n",
    "    nhl_18_df = nhl_18_df.iloc[:,[0,2,3]]\n",
    "    \n",
    "    unwanted_rows_indexes = []\n",
    "    for i in nhl_18_df.index :\n",
    "        row = nhl_18_df.iloc[i]\n",
    "        if row['team'] == row['W'] == row['L']:\n",
    "            unwanted_rows_indexes.append(i)\n",
    "            \n",
    "    nhl_18_df.drop(unwanted_rows_indexes, inplace = True)\n",
    "    nhl_18_df['team'] = nhl_18_df['team'].str.replace('[\\w.]* ','')\n",
    "    nhl_18_df = nhl_18_df.astype({'team': str, 'W': int, 'L': int})\n",
    "    nhl_18_df['W/L%'] = nhl_18_df['W']/(nhl_18_df['W']+nhl_18_df['L'])\n",
    "    \n",
    "    \n",
    "    \n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities= cities.replace('\\[.*\\]','',regex=True)\n",
    "    cities.rename(columns = {'Population (2016 est.)[8]':'Population'}, inplace= True)\n",
    "    team = cities['NHL'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "    team = team.replace('â€”',np.NaN)                     \n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  \n",
    "    team = team.drop('variable',axis = 1)                   \n",
    "    team = team.reset_index()                               \n",
    "    team.rename(columns = {'value':'team'},inplace = True)  \n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "    team_df = pd.merge(team,cities,how = 'left' , on= 'Metropolitan area')\n",
    "    team_df = team_df.iloc[:,1:4]                                                       \n",
    "    team_df = team_df.astype({'Metropolitan area': str, 'team': str, 'Population': int}) \n",
    "    \n",
    "    \n",
    "    \n",
    "    final_df =pd.merge(team_df,nhl_18_df,how='inner',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W/L%':np.nanmean,\n",
    "                                           'Population':np.nanmean})\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    population_by_region = aggregated_df['Population']  # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W/L%'] # pass in win/loss ratio from nhl_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q1: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q1: There should be 28 teams being analysed for NHL\"\n",
    "    \n",
    "    return aggregated_df[['W/L%']]\n",
    "\n",
    "\n",
    "# second:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "\n",
    "def nba_correlation():\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import scipy.stats as stats\n",
    "    import re\n",
    "\n",
    "    nba_df=pd.read_csv(\"assets/nba.csv\")\n",
    "    nba_18_df = nba_df[nba_df['year'] == 2018]\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\*]','')\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('\\(\\d*\\)','')\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\xa0]','')\n",
    "    nba_18_df = nba_18_df.iloc[:,[0,3]]\n",
    "    nba_18_df['team'] = nba_18_df['team'].str.replace('[\\w.]* ','')\n",
    "    nba_18_df = nba_18_df.astype({'team': str, 'W/L%': float})\n",
    "\n",
    "\n",
    "\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities= cities.replace('\\[.*\\]','',regex=True)\n",
    "    cities.rename(columns = {'Population (2016 est.)[8]':'Population'}, inplace= True)\n",
    "    team = cities['NBA'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "    team = team.replace('â€”',np.NaN)                         \n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  \n",
    "    team = team.drop('variable',axis = 1)                   \n",
    "    team = team.reset_index()                              \n",
    "    team.rename(columns = {'value':'team'},inplace = True)  \n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "    team_df = pd.merge(team,cities,how = 'left' , on= 'Metropolitan area')\n",
    "    team_df = team_df.iloc[:,1:4]                                                        \n",
    "    team_df = team_df.astype({'Metropolitan area': str, 'team': str, 'Population': int}) \n",
    "\n",
    "\n",
    "\n",
    "    final_df =pd.merge(team_df,nba_18_df, how='left',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W/L%':np.nanmean,\n",
    "                                           'Population':np.nanmean})\n",
    "    \n",
    "    population_by_region = aggregated_df['Population'] # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W/L%'] # pass in win/loss ratio from nba_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q2: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 28, \"Q2: There should be 28 teams being analysed for NBA\"\n",
    "\n",
    "    return aggregated_df[['W/L%']]\n",
    "\n",
    "\n",
    "# third :\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "def mlb_correlation(): \n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities.rename(columns={\"Population (2016 est.)[8]\": \"Population\"},\n",
    "              inplace=True)\n",
    "    team = cities['MLB'].str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    team = pd.melt(team, id_vars=['Metropolitan area'])\n",
    "    team = team.replace('â€”',np.NaN)                         \n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  \n",
    "    team = team.drop('variable',axis = 1)                   \n",
    "    team = team.reset_index()                               \n",
    "    team.rename(columns = {'value':'team'},inplace = True)  \n",
    "    team['team']=team['team'].str.replace('\\ Sox','Sox')\n",
    "    team['team']= team['team'].str.replace('[\\w.]*\\ ','')\n",
    "    team=pd.merge(team,cities,how='left',on = 'Metropolitan area').iloc[:,1:4]\n",
    "    team = team.astype({'Metropolitan area': str, 'team': str, 'Population': int})\n",
    "    \n",
    "    \n",
    "    mlb_df=pd.read_csv(\"assets/mlb.csv\")\n",
    "    mlb_18_df = mlb_df[nba_df['year'] == 2018]\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('[\\*]',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('\\(\\d*\\)',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('[\\xa0]',\"\")\n",
    "    mlb_18_df['team'] = mlb_18_df['team'].str.replace('\\ Sox','Sox')\n",
    "    mlb_18_df = mlb_18_df.iloc[:,[0,3]]\n",
    "    mlb_18_df['team']= mlb_18_df['team'].str.replace('[\\w.]*\\ ','')\n",
    "    mlb_18_df.rename(columns={\"W-L%\": \"W/L%\"},inplace=True)\n",
    "    mlb_18_df = mlb_18_df.astype({'team': str,'W/L%': float})\n",
    "    \n",
    "    \n",
    "\n",
    "    final_df =pd.merge(team,mlb_18_df , how='outer',on='team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W/L%':np.nanmean,\n",
    "                                           'Population':np.nanmean})  \n",
    "    \n",
    "    \n",
    "    population_by_region = aggregated_df['Population'] # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W/L%'] # pass in win/loss ratio from mlb_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q3: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 26, \"Q3: There should be 26 teams being analysed for MLB\"\n",
    "\n",
    "    return aggregated_df[['W/L%']] \n",
    "\n",
    "\n",
    "# forth:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import re\n",
    "\n",
    "\n",
    "\n",
    "def nfl_correlation(): \n",
    "    nfl_df=pd.read_csv(\"assets/nfl.csv\")\n",
    "    cities=pd.read_html(\"assets/wikipedia_data.html\")[1]\n",
    "    cities=cities.iloc[:-1,[0,3,5,6,7,8]]\n",
    "    cities.rename(columns={\"Population (2016 est.)[8]\": \"Population\"},\n",
    "              inplace=True)\n",
    "    \n",
    "    \n",
    "    nfl_df = nfl_df[nfl_df['year'] == 2018]\n",
    "    nfl_df = nfl_df[['team','W-L%']]\n",
    "    unwanted_rows = []\n",
    "    for i in nfl_df.index:\n",
    "        row = nfl_df.iloc[i]\n",
    "        if row['team'] == row['W-L%']:\n",
    "            unwanted_rows.append(i)\n",
    "    nfl_df = nfl_df.drop(unwanted_rows)    \n",
    "\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\*]',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('\\(\\d*\\)',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\xa0]',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('\\+',\"\")\n",
    "    nfl_df['team'] = nfl_df['team'].str.replace('[\\w.]* ',\"\")\n",
    "    nfl_df.rename(columns={\"W-L%\": \"W/L%\"},inplace=True)\n",
    "    nfl_df = nfl_df.astype({'team': str , 'W/L%':float})\n",
    "\n",
    "\n",
    "    cities = cities[['Metropolitan area','Population' , 'NFL']]\n",
    "    team = cities['NFL']\n",
    "    team= team.str.replace('\\[\\w.*\\]',\"\")\n",
    "    team = team.str.extract('([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)([A-Z]{0,2}[a-z0-9]*\\ [A-Z]{0,2}[a-z0-9]*|[A-Z]{0,2}[a-z0-9]*)')\n",
    "    team['Metropolitan area'] = cities['Metropolitan area']\n",
    "    team = pd.melt(team,id_vars= 'Metropolitan area')\n",
    "    team = team.replace('â€”',np.NaN)                         \n",
    "    team = team.replace('',np.NaN)\n",
    "    team = team.dropna()                  \n",
    "    team = team.drop('variable',axis = 1)                   \n",
    "    team = team.reset_index()                               \n",
    "    team.rename(columns = {'value':'team'},inplace = True) \n",
    "    team =team[['Metropolitan area', 'team']]\n",
    "    team = pd.merge(team,cities,how='left' , on='Metropolitan area')\n",
    "    team = team.astype({'Metropolitan area':str , 'team' : str\n",
    "                                                ,'Population':int})\n",
    "\n",
    "    final_df = pd.merge(team,nfl_df,how='outer',on= 'team')\n",
    "    aggregated_df = final_df.groupby('Metropolitan area').agg({'W/L%':np.nanmean,'Population':np.nanmean})\n",
    "    \n",
    "    population_by_region = aggregated_df['Population']  # pass in metropolitan area population from cities\n",
    "    win_loss_by_region = aggregated_df['W/L%']  # pass in win/loss ratio from nfl_df in the same order as cities[\"Metropolitan area\"]\n",
    "\n",
    "    assert len(population_by_region) == len(win_loss_by_region), \"Q4: Your lists must be the same length\"\n",
    "    assert len(population_by_region) == 29, \"Q4: There should be 29 teams being analysed for NFL\"\n",
    "\n",
    "    return aggregated_df[['W/L%']] \n",
    "\n",
    "def generate_dataframe(league_name):\n",
    "    if league_name == 'NHL':\n",
    "        return nhl_correlation()\n",
    "    if league_name == 'NBA':\n",
    "        return nba_correlation()\n",
    "    if league_name == 'MLB':\n",
    "        return mlb_correlation()\n",
    "    if league_name == 'NFL':\n",
    "        return nfl_correlation()\n",
    "    else:\n",
    "        return \"inappropiate input\"\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def sports_team_performance():\n",
    "    # YOUR CODE HERE\n",
    "    # raise NotImplementedError()\n",
    "    \n",
    "    # Note: p_values is a full dataframe, so df.loc[\"NFL\",\"NBA\"] should be the same as df.loc[\"NBA\",\"NFL\"] and\n",
    "    # df.loc[\"NFL\",\"NFL\"] should return np.nan\n",
    "    sports = ['NFL', 'NBA', 'NHL', 'MLB']\n",
    "    p_values = pd.DataFrame({k:np.nan for k in sports}, index=sports)\n",
    "    for league1 in sports:\n",
    "        for league2 in sports:\n",
    "            if league1 != league2:\n",
    "                master_df = pd.merge(generate_dataframe(league1),generate_dataframe(league2),how='inner' , on = 'Metropolitan area')\n",
    "                p_values.loc[league1 , league2] = stats.ttest_rel(master_df['W/L%_x'],master_df['W/L%_y'])[1]\n",
    "    \n",
    "    assert abs(p_values.loc[\"NBA\", \"NHL\"] - 0.02) <= 1e-2, \"The NBA-NFL p-value should be around 0.02\"\n",
    "    assert abs(p_values.loc[\"MLB\", \"NFL\"] - 0.80) <= 1e-2, \"The MLB-NFL p-value should be around 0.80\"\n",
    "    return p_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "2a596ab421a45cc01168d10e8fbb8f89",
     "grade": true,
     "grade_id": "cell-fb4b9cb5ff4570a6",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "coursera": {
   "schema_names": [
    "mooc_adswpy_1_v2_assignment4"
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
